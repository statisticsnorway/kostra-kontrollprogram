package no.ssb.kostra.control.famvern.s55;

import no.ssb.kostra.control.felles.ControlFelt1LikSumAvListe;
import no.ssb.kostra.controlprogram.Arguments;
import no.ssb.kostra.felles.Constants;
import org.junit.Test;

import java.io.ByteArrayInputStream;
import java.nio.charset.StandardCharsets;
import java.util.List;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

public class MainITest {

    @Test
    public void testDoControl() {
        // @formatter:off
        String inputFileContent =

                //00000000111111111122222222223333333333444444444455555555556666666666777777777788888888889999999999000000000011111111112222222222333333333344444444445555555555666666666677777777778888888888999999999900000000001111111111222222222233333333334444444444555555555566666666667777777777888888888899999999990000000000111111111122222222223333333333444444444455555555556666666666777777777788888888889999999999000000000011111111112222222222333333333344444444445555555555666666666677777777778888888888999999999900000000001111111111222222222233333333334444444444555555555566666666667777777777888888888899999999990000000000111111111122222222223333333333444444444455555555556666666666777777777788888888889999999999000000000011111111112222222222333333333344444444445555555555666666666677777777778888888888999999999900000000001111111111222222222233333333334444444444555555555566666666667777777777888888888899999999990000000000111111111122222222223333333333444444444455555555556666666666777777777788888888889999999999
                //23456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789
                """

                        01FeilVikens
                        54Troms og Finnmark                 03400050001000010000025000200005000100001000002500020000500010000100000250002000500100010000250004000050001000010000025000020000250000500000500001250001000020000050000250002000005000025000200000500002500200005000250002000005000025000100000025000125000100000700005000030000250001000007000050000300002500010000070000500003000025001000070005000300025000100000700005000030000250000500000350000250000150001250001000005000015000100001000005000025000100001000005000025000100001000005000025001000100005000250001000010000050000250000500000500000250001250001000005000050007000060000330000500005000150000250000500005000150000250000500005000150000250005000500150002500005000050001500002500002500002500007500012500003000010000100000500003000010000100000500003000010000100000500030001000100005000030000100001000005000015000005000005000025000050002000002500005000200000250000500020000025000500200002500005000200000250000250001000001250                        0    \s
                        03Oslos""";
        // @formatter:on

        var byteArrayInputStream = new ByteArrayInputStream(inputFileContent.getBytes(StandardCharsets.ISO_8859_1));
        var arguments = new Arguments(new String[]{"-s", "55F", "-y", "2020", "-r", "667600"}, byteArrayInputStream);
        var errorReport = Main.doControls(arguments);

        if (Constants.DEBUG) {
            System.out.print(errorReport.generateReport());
        }

        assertNotNull("Has content ErrorReport", errorReport);
        assertEquals(Constants.NORMAL_ERROR, errorReport.getErrorType());
    }

    @Test
    public void testDoControl2() {
        // @formatter:off
        String inputFileContent =

                //00000000111111111122222222223333333333444444444455555555556666666666777777777788888888889999999999000000000011111111112222222222333333333344444444445555555555666666666677777777778888888888999999999900000000001111111111222222222233333333334444444444555555555566666666667777777777888888888899999999990000000000111111111122222222223333333333444444444455555555556666666666777777777788888888889999999999000000000011111111112222222222333333333344444444445555555555666666666677777777778888888888999999999900000000001111111111222222222233333333334444444444555555555566666666667777777777888888888899999999990000000000111111111122222222223333333333444444444455555555556666666666777777777788888888889999999999000000000011111111112222222222333333333344444444445555555555666666666677777777778888888888999999999900000000001111111111222222222233333333334444444444555555555566666666667777777777888888888899999999990000000000111111111122222222223333333333444444444455555555556666666666777777777788888888889999999999
                //23456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789
                "99BARE TULL, alle kontroller -> feil
        // @formatter:on

        var byteArrayInputStream = new ByteArrayInputStream(inputFileContent.getBytes(StandardCharsets.ISO_8859_1));
        var arguments = new Arguments(new String[]{"-s", "55F", "-y", "2020", "-r", "667600"}, byteArrayInputStream);
        var errorReport = Main.doControls(arguments);

        if (Constants.DEBUG) {
            System.out.print(errorReport.generateReport());
        }

        assertNotNull("Has content ErrorReport", errorReport);
        assertEquals(Constants.NORMAL_ERROR, errorReport.getErrorType());
    }

    @Test
    public void testDoControl3() {
        String measure = "BARNDELT";
        var clTSSSTF = List.of("TOT", "SEP", "SAM", "SAK", "TILB", "FLY");

        var fieldLists1 =
                List.of(clTSSSTF.stream()
                        .map(item -> measure.concat("_").concat(item).concat("_TOT"))
                        .toList());
        var fieldLists2 = ControlFelt1LikSumAvListe.createFieldList(measure, clTSSSTF, "TOT");

        System.out.println(fieldLists1);
        System.out.println(fieldLists2);

        assertEquals(fieldLists2, fieldLists1);
    }
}
